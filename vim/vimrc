" ~/.vimrc
" User-specific vim settings

" Change the mapleader for bépo
let mapleader = ";"

" Setup the Solarized theme
if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme solarized


" Misc settings
set wildmenu            " Enhanced tab completion
set number              " Show line numbers
set noswapfile          " Don't use them swap files
set laststatus=2        " Always put a status line, event when there's only one window
set modeline            " Enable the modeline

" Tab/indent settings
set tabstop=4           " A tab is 4 spaces
set softtabstop=4
set shiftwidth=4        " Indentation width
set expandtab           " Expand tabs to spaces

" Fold settings
set foldmethod=manual   " Let the user decide what to fold
set nofoldenable        " Don't fold anything by default

" Search settings
set smartcase           " Ignore case if search pattern is all lowercase
set incsearch           " Show matches as you type

" Display tabs and trailing spaces
set list
set listchars=nbsp:¤,tab:\|\ ,trail:•
highlight SpecialKey ctermfg=Black

" Highlight the current line
set cursorline

" Mouse settings
if &term ==? "xterm-256color" || &term ==? "putty-256color" || &term ==? "screen-256color" || &term ==? "tmux-256color"
  set ttymouse=sgr      " Terminal mouse fixes
endif
set mouse=a             " Use the mouse

" Specific overrides
if has('autocmd')
    " Retain tabs in Makefiles and gitconfig
    autocmd FileType make setlocal noexpandtab
    autocmd FileType gitconfig setlocal noexpandtab
    " Open .tm files as Tcl modules
    autocmd BufNewFile,BufRead *.tm set filetype=tcl
    " Use the n man section in Tcl files
    autocmd FileType tcl setlocal keywordprg=man\ n
    " Syntax-highlight apparmor profiles
    autocmd BufNewFile,BufRead /etc/apparmor.d/*                      set filetype=apparmor
    autocmd BufNewFile,BufRead /usr/share/apparmor/extra-profiles/*   set filetype=apparmor
endif


" Fn key bindings
set pastetoggle=<F2>
nnoremap <F4> :call ReloadTags()<CR>
nnoremap <F5> :TagbarOpen fjc<CR>
nnoremap <F6> :Calc<CR>
nnoremap <F7> :GundoToggle<CR>

" Navigate the buffers
nmap gb :bnext<CR>
nmap gB :bprevious<CR>

" Clear the current search with ;/
nmap <silent> <leader>/ :nohlsearch<CR>

" Use w!! when you forgot to 'sudo vi'
cmap w!! w !sudo tee % >/dev/null
cmap w$$ w !sudo tee % >/dev/null

" Map \ev and \sv to edit/source your vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Invoke clang-format
map <C-K> :py3f /usr/lib/llvm/9/share/clang/clang-format.py<CR>
imap <C-K> <C-O>:py3f /usr/lib/llvm/9/share/clang/clang-format.py<CR>


" Custom functions
function! ReloadTags()
    !build-tags
    cscope reset
endfunction

function! ClangFormatOnSave()
    if filereadable(".clang-format") || filereadable("_clang-format")
        let l:formatdiff = 1
        py3f /usr/lib/llvm/9/share/clang/clang-format.py
    endif
endfunction
if has('autocmd')
    autocmd BufWritePre *.h,*.c,*.hh,*.cc,*.hpp,*.cpp call ClangFormatOnSave()
endif


" cscope settings
if has("cscope")
    set cscopetagorder=0    " 0: search cscope then tags; 1: search tags then cscope
    set cscopetag           " use :cstag instead of :tag
    set nocscopeverbose     " hide database loading error messages (for the next few lines)
    if filereadable("cscope.out")
        cscope add cscope.out
    elseif $CSCOPE_DB != ""
        cscope add $CSCOPE_DB
    endif
    set cscopeverbose       " restore database loading error messages
endif
" g[ / cscope find s: find symbol under cursor
" g) / cscope find d: find functions called by function under cursor
" g( / cscope find c: find functions calling function under cursor
" g» / cscope find f: find file under cursor
" g« / cscope find i: find file #including file under cursor
" g> / cscope find t: find text string under cursor
" g< / cscope find a: find assignments to symbol under cursor
nmap g[ :cscope find s <C-R>=expand("<cword>")<CR><CR>
nmap g) :cscope find d <C-R>=expand("<cword>")<CR><CR>
nmap g( :cscope find c <C-R>=expand("<cword>")<CR><CR>
nmap g» :cscope find f <C-R>=expand("<cfile>")<CR><CR>
nmap g« :cscope find i <C-R>=expand("<cfile>")<CR><CR>
nmap g> :cscope find t <C-R>=expand("<cword>")<CR><CR>
nmap g< :cscope find a <C-R>=expand("<cword>")<CR><CR>

" airline settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_exclude_preview = 1
set noshowmode                                  " hide the redundant mode message

" ack settings
let g:ackprg = 'ag --vimgrep'
if executable('rg')
    let g:ackprg = 'rg --vimgrep'
endif
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space><cword><CR>

" gundo settings
let g:gundo_prefer_python3 = 1
let g:gundo_right = 1
let g:gundo_help = 0

" gist settings
let g:gist_clip_command = 'xclip -selection clipboard'
let g:gist_detect_filetype = 1

" CtrlSpace settings
set hidden

" easy-align settings
vmap gA <Plug>(EasyAlign)
nmap gA <Plug>(EasyAlign)

" YouCompleteMe settings
let g:ycm_clangd_binary_path = '/usr/lib/llvm/9/bin/clangd'

" reStructuredText support for tagbar (needs jszakmeister/rst2ctags)
let g:tagbar_type_rst = {
    \ 'ctagstype': 'rst',
    \ 'ctagsbin' : 'rst2ctags',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

" Markdown support for tagbar (needs jszakmeister/markdown2ctags -- from GitHub or pip)
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : 'markdown2ctags',
    \ 'ctagsargs' : '-f - --sort=yes --sro=»',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '»',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

" MediaWiki support for tagbar
let g:tagbar_type_mediawiki = {
    \ 'ctagstype' : 'mediawiki',
    \ 'kinds' : [
        \'c:chapters',
        \'s:sections',
        \'u:subsections',
        \'b:subsubsections',
    \],
    \ 'sort': 0,
\}
